# Authors: Florian Lercher, Gerald WÃ¼rsching, Tobias Mascetta. Cyber-Physical Systems Group, TUM
# This file is adapted from the EnvironmentModel project: see https://gitlab.lrz.de/cps/commonroad/environment-model


# --------------- Gitlab Internal Variables ------------------------
# Predefined internal variables from gitlab ci: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# CI_REGISTRY: Gitlab Container Registry with Docker container for project
# CI_JOB_TOKEN: Token, valid as long as the job is running
# CI_PROJECT_DIR: path where project is cloned to and gitlab job runs from

stages:
  - static-check
  - compile
  - build-wheels
  - test
  - deploy
  - publish

.update-git-config: &update-git-config
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"

default:
  image: $CI_REGISTRY/cps/commonroad-reachable-set/deps:2.0
  before_script:
    - *update-git-config

.python-versions: &python-versions
  - "3.7"
  - "3.8"
  - "3.9"
  - "3.10"
#  - "3.11"

### static checks ###
clang-tidy:
  stage: static-check
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
    - cd ..
    - bash ./ci/clang-tidy.sh
  needs: [ ]

### build C++ library ###
.cache-build-dir:
  cache: &cache_dependency_archives
    key: cache-dependency-archives
    paths:
      - build/_deps/*-subbuild/*-populate-prefix/src/*.{tar*,zip}
    policy: pull

generate-cache:
  stage: compile
  cache:
    <<: *cache_dependency_archives
    policy: push
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DFETCHCONTENT_QUIET:BOOL=OFF
  needs: [ ]

build-gcc:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release
  needs: [ ]

build-test:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config RelWithDebInfo --target crreach_test
  needs: [ ]
  artifacts:
    paths:
      - build
    expire_in: 30 minutes

### build wheels ###
build-sdist:
  stage: build-wheels
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  script:
    - python3 --version
    - python3 -m build --sdist
  needs: [ ]
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 30 minutes

.common-rules:
  rules:
    # Rule to disable a job for merge request pipelines (imitate default job behaviour)
    - &skip_merge_request_pipeline
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: &full_wheel_build_condition $CI_COMMIT_TAG || $CI_COMMIT_REF_PROTECTED == "true" || $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^(main|develop)$/

build-wheel:
  stage: build-wheels
  # Use the privileged runner as required for Docker-in-Docker (dind)
  tags:
    - wheel
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:20.10-dind
      entrypoint: [ "env", "-u", "DOCKER_HOST" ]
      command: [ "dockerd-entrypoint.sh" ]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    CIBW_BEFORE_ALL: "git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de//\".insteadOf \"git@gitlab.lrz.de:\" && git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/\".insteadOf \"ssh://git@gitlab.lrz.de\""
    # NOTE: The following variables correspond to the default values.
    # They are specified here so that it is possible to override them using
    # Gitlab push options or in the UI when running a manual pipeline.
    #
    # For example, use git push -o ci.variable="CIBW_BUILD_VERBOSITY=1"
    # to make cibuildwheel verbose in the pipeline created for the pushed commit.
    CIBW_BUILD_VERBOSITY: 1
    CIBW_TEST_SKIP: "*i686 *-musllinux*"
    # We only use the artifacts (sdist/wheels) from previous jobs, so skip all Git operations
    GIT_STRATEGY: none
  script:
    - cibuildwheel dist/*.tar.gz
  needs:
    - job: build-sdist
      artifacts: true
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 30 minutes
  rules:
    - *skip_merge_request_pipeline
    # When we are building wheels for a tag/release, build wheel for all supported Python versions and platform
    # Also routinely build all wheels for the default branch as well as develop (commits on these branches are infrequent)
    - if: *full_wheel_build_condition
      variables:
        CIBW_BUILD: "*"
    # Fallback rule when we're not building wheels for a tag or a main branch:
    # In that case, build only manylinux wheels to speed up the pipeline
    - when: on_success
      variables:
        CIBW_BUILD: "*-manylinux_x86_64"

#### tests ###
run-doctest:
  stage: test
  script:
    - build/RelWithDebInfo/crreach_test
  needs:
    - job: build-test
      artifacts: true

run-pytest:
  stage: test
  image: python:${JOB_PYTHON_VERSION}-slim-bullseye
  before_script:
    # we need build-essential, since Polygon3 (dependency of the drivability checker) has to be compiled from source
    # libgl1 and libglib2.0-0 are required for the native cv2 package
    - apt-get update && apt-get install -y --no-install-recommends git build-essential libgl1 libglib2.0-0
    - *update-git-config
  script:
    # install requirements and package separately to make sure that the package is installed from the wheel and not from PyPI
    - pip install pip-tools
    - pip-compile --extra=test -o requirements_test.txt pyproject.toml
    - pip install -r requirements_test.txt
    - pip install --no-index --find-links=wheelhouse/ commonroad-reach[test]
    - cd tests
    # use --import-mode=append to test the installed package and not the source
    - pytest --import-mode append
  needs:
    - job: build-wheel
      artifacts: true
  parallel:
    matrix:
      - JOB_PYTHON_VERSION: *python-versions

#### deploy wheels ###
#.install-twine: &install-twine
#  - *conda-init
#  - conda activate "${CONDA_ENV_PREFIX}3.9"
#  - python -m pip install --upgrade pip
#  - pip install twine
#
#push-to-internal-registry:
#  # push built wheels to the internal GitLab PyPi registry
#  stage: deploy
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    # use python module twine and gitlab internal variables
#    - *install-twine
#    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --skip-existing --repository-url https://gitlab.lrz.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/wheelhouse/* dist/commonroad-reach-*.tar.gz --verbose
#  needs:
#    - job: build-wheels-py
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "develop"
#      when: manual
#
#push-to-external-pypi-test-registry:
#  # push built wheels to the external PyPi test registry
#  # at: https://test.pypi.org/project/commonroad-reach/
#  stage: deploy
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    - *install-twine
#    - TWINE_PASSWORD=${CR_PYPI_TEST_API_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/wheelhouse/* dist/commonroad-reach-*.tar.gz --verbose
#  needs:
#    - job: build-wheels-py
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"
#      when: manual
#
#push-to-external-pypi-registry:
#  # push built wheels to the external PyPi registry
#  # at: https://pypi.org/project/commonroad-reach/
#  stage: deploy
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    - *install-twine
#    - TWINE_PASSWORD=${CR_PYPI_RELEASE_API_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/wheelhouse/* dist/commonroad-reach-*.tar.gz --verbose
#  needs:
#    - job: build-wheels-py
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"
#      when: manual

### publish documentation ###
pages:
  # Push the latest documentation of the main branch to the GitLab Pages documentation
  # at https://cps.pages.gitlab.lrz.de/commonroad-reachable-set
  stage: publish
  image: python:3.10-slim-bullseye
  script:
    - pip install -r ./docs/requirements_doc.txt
    - cd docs/Sphinx
    - make html
    - mv ./build/html ../../public
  artifacts:
    paths:
      - public
  environment:
    name: Gitlab Pages
    url: https://cps.pages.gitlab.lrz.de/commonroad-reachable-set
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
