# Authors: Florian Lercher, Gerald WÃ¼rsching, Tobias Mascetta. Cyber-Physical Systems Group, TUM


# --------------- Gitlab Internal Variables ------------------------
# Predefined inernal variables from gitlab ci: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# CI_REGISTRY: Gitlab Container Registry with Docker container for project
# CI_JOB_TOKEN: Token, valid as long as the job is running
# CI_PROJECT_DIR: path where project is cloned to and gitlab job runs from





# -------------- Variables from Docker container ----------------------------
# CRDC_DIR: commonroad-drivability-checker dir


stages:
  - static-check
  - compile
  - build-wheels
  - test
  - deploy
  - publish

variables:
  BUILD_JOBS: 20

default:
  image: $CI_REGISTRY/cps/commonroad-reachable-set/deps:2.0
  before_script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"

.python-versions: &python-versions
  - "3.7"
  - "3.8"
  - "3.9"
  - "3.10"
#  - "3.11"

### static checks ###
clang-tidy:
  stage: static-check
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
    - cd ..
    - bash ./ci/clang-tidy.sh
  needs: [ ]

### build C++ library ###
.cache-build-dir:
  cache: &cache_dependency_archives
    key: cache-dependency-archives
    paths:
      - build/_deps/*-subbuild/*-populate-prefix/src/*.{tar*,zip}
    policy: pull

generate-cache:
  stage: compile
  cache:
    <<: *cache_dependency_archives
    policy: push
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DFETCHCONTENT_QUIET:BOOL=OFF
  needs: [ ]

build-gcc:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release
  needs: [ ]

build-test:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config RelWithDebInfo --target crreach_test
  needs: [ ]
  artifacts:
    paths:
      - build
    expire_in: 30 minutes

build-sdist:
  stage: build-wheels
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  script:
    - python3 --version
    - python3 -m build --sdist
  needs: [ ]
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 30 minutes

build-wheel:
  stage: build-wheels
  # Use the privileged runner as required for Docker-in-Docker (dind)
  tags:
    - dind
  image: $CI_REGISTRY/cps/rapid-prototyping-setup/wheelenv:1.0
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:20.10-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    CIBW_BEFORE_ALL: "git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de//\".insteadOf \"git@gitlab.lrz.de:\" && git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/\".insteadOf \"ssh://git@gitlab.lrz.de\""
    # NOTE: The following variables correspond to the default values.
    # They are specified here so that it is possible to override them using
    # Gitlab push options or in the UI when running a manual pipeline.
    #
    # For example, use git push -o ci.variable="CIBW_BUILD_VERBOSITY=1"
    # to make cibuildwheel verbose in the pipeline created for the pushed commit.
    CIBW_BUILD_VERBOSITY: 1
    CIBW_TEST_SKIP: "*i686 *-musllinux*"
    # We only use the artifacts (sdist/wheels) from previous jobs, so skip all Git operations
    GIT_STRATEGY: none
  script:
    - cibuildwheel dist/*.tar.gz
  needs:
    - job: build-sdist
      artifacts: true
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 30 minutes
  rules:
    # Fallback rule when we're not building wheels for a tag or a main branch:
    # In that case, build only a single wheel to speed up the pipeline
    - when: on_success
      variables:
        CIBW_BUILD: "cp310-manylinux_x86_64"

#compile-via-pip-install:
#  stage: compile
#  script:
#    - *conda-init
#    - conda activate "$CONDA_ENV_PREFIX$PYTHON_VER"
#    - *python-prepare
#    - pip install -v . --config-settings=cmake.define.CMAKE_BUILD_PARALLEL_LEVEL=$BUILD_JOBS
#  parallel:
#    matrix:
#      - PYTHON_VER: *python-versions
#  needs: [ ]

#### tests ###
run-doctest:
  stage: test
  script:
    - build/RelWithDebInfo/crreach_test
  needs:
    - job: build-test
      artifacts: true

#run-pytest:
#  stage: test
#  script:
#    - *conda-init
#    - conda activate "$CONDA_ENV_PREFIX$PYTHON_VER"
#    - *python-prepare
#    - cd tests
#    - pytest .
#  parallel:
#    matrix:
#      - PYTHON_VER: *python-versions
#  needs:
#    - job: compile-cpp
#      artifacts: true
#
#### build wheels ###
## Currently using development branch of cr-drivability checker
#build-wheels-py:
#  stage: build-wheels
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    - *conda-init
#    - conda activate "$CONDA_ENV_PREFIX$PYTHON_VER"
#    - *python-prepare
#    - pip install build
#    - python -m build --sdist  # source distribution: create .tar.gz file
#    - python -m build --wheel  # binary distribution: create .whl file --> contains platform specific .so files etc.
#    # Audit python wheels --> also needed to link the generated .so from the cpp package!
#    - cd dist
#    - auditwheel show *.whl
#    - auditwheel repair *.whl
#  parallel:
#    matrix:
#      - PYTHON_VER: *python-versions
#  artifacts:
#    paths:
#      - $CI_PROJECT_DIR/dist
#  needs: [ ]
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"
#
#### deploy wheels ###
#.install-twine: &install-twine
#  - *conda-init
#  - conda activate "${CONDA_ENV_PREFIX}3.9"
#  - python -m pip install --upgrade pip
#  - pip install twine
#
#push-to-internal-registry:
#  # push built wheels to the internal GitLab PyPi registry
#  stage: deploy
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    # use python module twine and gitlab internal variables
#    - *install-twine
#    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --skip-existing --repository-url https://gitlab.lrz.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/wheelhouse/* dist/commonroad-reach-*.tar.gz --verbose
#  needs:
#    - job: build-wheels-py
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "develop"
#      when: manual
#
#push-to-external-pypi-test-registry:
#  # push built wheels to the external PyPi test registry
#  # at: https://test.pypi.org/project/commonroad-reach/
#  stage: deploy
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    - *install-twine
#    - TWINE_PASSWORD=${CR_PYPI_TEST_API_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/wheelhouse/* dist/commonroad-reach-*.tar.gz --verbose
#  needs:
#    - job: build-wheels-py
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"
#      when: manual
#
#push-to-external-pypi-registry:
#  # push built wheels to the external PyPi registry
#  # at: https://pypi.org/project/commonroad-reach/
#  stage: deploy
#  image: $CI_REGISTRY/cps/commonroad-reachable-set/manylinux_wheelbuild:latest
#  script:
#    - *install-twine
#    - TWINE_PASSWORD=${CR_PYPI_RELEASE_API_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/wheelhouse/* dist/commonroad-reach-*.tar.gz --verbose
#  needs:
#    - job: build-wheels-py
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"
#      when: manual
#
#### publish documentation ###
#pages:
#  # Push the latest documentation of the main branch to the GitLab Pages documentation
#  # at https://cps.pages.gitlab.lrz.de/commonroad-reachable-set
#  stage: publish
#  script:
#    - *conda-init
#    - conda activate "${CONDA_ENV_PREFIX}3.7"
#    - *python-prepare
#    - pip install -r ./docs/requirements_doc.txt
#    - cd docs/Sphinx
#    - make html
#    - mv ./build/html ../../public
#  artifacts:
#    paths:
#      - public
#  environment:
#    name: Gitlab Pages
#    url: https://cps.pages.gitlab.lrz.de/commonroad-reachable-set
#  rules:
#    - if: $CI_COMMIT_BRANCH == "main"
